#include <iostream>
#include <vector>
using namespace std;

int knapsack(int W, vector<int>& weights, vector<int>& values, vector<int>& selectedItems) {
    int n = weights.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= W; j++) {
            if (weights[i - 1] <= j) {
                dp[i][j] = max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    int maxVal = dp[n][W];
    int w = W;
    for (int i = n; i > 0 && maxVal > 0; i--) {
        if (maxVal != dp[i - 1][w]) {
            selectedItems.push_back(i - 1);
            maxVal -= values[i - 1];
            w -= weights[i - 1];
        }
    }
    return dp[n][W];
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;
    vector<int> weights(n), values(n);
    cout << "Enter weights for all items: ";
    for (int i = 0; i < n; i++) {
        cin >> weights[i];
    }
    cout << "Enter values for all items: ";
    for (int i = 0; i < n; i++) {
        cin >> values[i];
    }
    cout << "Enter knapsack capacity: ";
    cin >> W;

    vector<int> selectedItems;
    int maxValue = knapsack(W, weights, values, selectedItems);
    
    cout << "Maximum value that can be achieved: " << maxValue << endl;
    cout << "Items selected (weight, value):" << endl;
    for (int i = selectedItems.size() - 1; i >= 0; i--) {
        cout << "(" << weights[selectedItems[i]] << ", " << values[selectedItems[i]] << ")" << endl;
    }

    return 0;
}
â€ƒ
