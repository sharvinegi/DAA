#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int N;
    cin >> N;
    vector<int> start_times(N);
    vector<int> finish_times(N);

    for (int i = 0; i < N; ++i) {
        cin >> start_times[i];
    }

    for (int i = 0; i < N; ++i) {
        cin >> finish_times[i];
    }

    vector<pair<int, pair<int, int>>> activities;
    for (int i = 0; i < N; ++i) {
        activities.push_back({finish_times[i], {start_times[i], i + 1}});
    }

    sort(activities.begin(), activities.end());

    vector<int> selected_activities;
    int last_finish_time = 0;

    for (const auto& activity : activities) {
        if (activity.second.first >= last_finish_time) {
            selected_activities.push_back(activity.second.second);
            last_finish_time = activity.first;
        }
    }

    cout << "No. of non-conflicting activities: " << selected_activities.size() << endl;
    cout << "List of selected activities: ";
    for (size_t i = 0; i < selected_activities.size(); ++i) {
        if (i > 0) cout << ", ";
        cout << selected_activities[i];
    }
    cout << endl;

    return 0;
}
â€ƒ
