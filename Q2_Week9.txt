#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Item
{
	int weight;
	int value;
	double ratio;
	int index;
};

bool compare(Item a, Item b)
{
	return a.ratio > b.ratio;
}

void fractionalKnapsack(int N, vector<int> &weights, vector<int> &values, int capacity)
{
	vector<Item> items(N);

	for (int i = 0; i < N; i++)
	{
		items[i].weight = weights[i];
		items[i].value = values[i];
		items[i].ratio = (double) values[i] / weights[i];
		items[i].index = i;
	}

	sort(items.begin(), items.end(), compare);

	int currentWeight = 0;
	double finalValue = 0.0;
	vector<pair<int, int>> selectedItems;

	for (int i = 0; i < N; i++)
	{
		if (currentWeight + items[i].weight <= capacity)
		{
			currentWeight += items[i].weight;
			finalValue += items[i].value;
			selectedItems.push_back({ items[i].index + 1, items[i].weight });
		}
		else
		{
			int remainingWeight = capacity - currentWeight;
			finalValue += items[i].ratio * remainingWeight;
			selectedItems.push_back({ items[i].index + 1, remainingWeight });
			break;
		}
	}

	cout << "Maximum value: " << finalValue << endl;
	cout << "item-weight" << endl;
	for (auto item: selectedItems)
	{
		cout << item.first << "-" << item.second << endl;
	}
}

int main()
{
	int N;
	cout << "Enter the number of items: ";
	cin >> N;

	vector<int> weights(N);
	vector<int> values(N);

	cout << "Enter the weights of the items: ";
	for (int i = 0; i < N; i++)
	{
		cin >> weights[i];
	}

	cout << "Enter the values of the items: ";
	for (int i = 0; i < N; i++)
	{
		cin >> values[i];
	}

	int capacity;
	cout << "Enter the maximum capacity of the knapsack: ";
	cin >> capacity;

	fractionalKnapsack(N, weights, values, capacity);

	return 0;
}
?
