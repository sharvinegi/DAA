#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int isBipartite(int src, int v, vector<int> adj[], vector<int>& color)
{
   	 queue<int> q;
    	 q.push(src);
    	color[src] = 1; 
    	while (!q.empty()) 
    	{
       		 int u = q.front();
        		q.pop();
        		for (int v : adj[u])
        		{
           			 if (color[v] == -1) 
            			{
                			color[v] = 1 - color[u];
                			q.push(v);
            			} 
            			else if (color[v] == color[u]) 
            			{
                			return 0;
            			}
        		}
    	}
   	 return 1; 
}
int checkBipartite(int v, vector<int> adj[])
{
    	vector<int> color(v, -1); 
    	int result = 1; 
    	for (int i = 0; i < v; ++i) 
    	{
        		if (color[i] == -1) 
        		{ 
            			result = isBipartite(i, v, adj, color);
            			if (result == 0) 
            			{
               			 return 0; 
            			}
        		}
    	}
    	return result;
}
int main()
{
    	int v, e;
    	cout << "Enter the number of vertices: ";
    	cin >> v;
    	cout << "Enter the number of edges: ";
    	cin >> e;
    	vector<int> adj[v];
    	cout << "Enter the edges (vertex pairs):\n";
    	for (int i = 0; i < e; ++i)
    	{
        		int u, v;
        		cin >> u >> v;
        		adj[u].push_back(v);
        		adj[v].push_back(u);
    	}
    	int result = checkBipartite(v, adj);
    	if (result == 1) 
    	{
        		cout << "The graph is bipartite.\n";
    	} 
    	else 
    	{
        		cout << "The graph is not bipartite.\n";
    	}
   	 return 0;
}











