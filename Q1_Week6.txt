#include <iostream>
#include <vector>
#include <stack>
using namespace std;
int dfs(vector<vector<int>>& adj, int src, int dest, int v) 
{
    	stack<int> s;
    	vector<int> visited(v, 0);
    	s.push(src);
    	while (!s.empty()) 
    	{
       		 int t = s.top();
        		s.pop();
        		if (t == dest)
           		 return 1;
        		if (visited[t] != 1) 
        		{
            			visited[t] = 1;
            			for (int i = 0; i < v; ++i) 
            			{
               			 if (adj[t][i] && visited[i] != 1)
                    			s.push(i);
            			}
        		}
    	}
    	return 0; 
}
int main()
{
    	int vertices, edges;
    	cout << "Enter the number of vertices: ";
    	cin >> vertices;
    	cout << "Enter the number of edges: ";
    	cin >> edges;
    	vector<vector<int>> adj(vertices, vector<int>(vertices, 0));
    	cout << "Enter the edges (vertex pairs):\n";
    	for (int i = 0; i < edges; ++i)
    	{
       		 int u, v;
        		cin >> u >> v;
       		 adj[u][v] = 1; 
        		adj[v][u] = 1; 
    	}
    	int src, dest;
    	cout << "Enter the source vertex: ";
    	cin >> src;
    	cout << "Enter the destination vertex: ";
    	cin >> dest;
    	int result = dfs(adj, src, dest, vertices);
    	if (result == 1)
        		cout << "Yes Path Exists" << endl;
   	 else
        		cout << "No Such Path Exists" << endl;
   	 return 0;
}

