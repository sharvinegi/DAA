#include<bits/stdc++.h>
using namespace std;

class Graph {
    int V;
    list<int> *adj;
    void DFSUtil(int v, vector<bool> &visited);
public:
    Graph(int V);
    void addEdge(int v, int w);
    int findMother();
};

Graph::Graph(int V) {
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
}

void Graph::DFSUtil(int v, vector<bool> &visited) {
    visited[v] = true;
    for(auto i = adj[v].begin(); i != adj[v].end(); ++i) {
        if(!visited[*i])
            DFSUtil(*i, visited);
    }
}

int Graph::findMother() {
    vector<bool> visited(V, false);
    int v = 0;
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            DFSUtil(i, visited);
            v = i;
        }
    }
    fill(visited.begin(), visited.end(), false);
    DFSUtil(v, visited);
    for(int i = 0; i < V; i++) {
        if(!visited[i])
            return -1;
    }
    return v;
}

int main() {
    int V;
    cin >> V;
    Graph g(V);
    for(int i = 0; i < V; i++) {
        int vertex, num;
        cin >> vertex;
        cin >> num;
        for(int j = 0; j < num; j++) {
            int adjVertex;
            cin >> adjVertex;
            g.addEdge(vertex, adjVertex);
        }
    }
    int mother = g.findMother();
    if(mother != -1)
        cout << mother << endl;
    else
        cout << "No mother vertex found." << endl;
    return 0;
}
â€ƒ
