#include <iostream> #include <vector> #include <queue> #include <climits> using namespace std;

int primMST(vector<vector < int>> &graph)
{

int V = graph.size(); vector<int> key(V, INT_MAX); vector<int> parent(V, -1); vector<bool> inMST(V, false);

priority_queue<pair<int, int>, vector< pair<int, int>>, greater<pair<int, int>>> pq;


pq.push({ 0, 0 });
key[0] = 0;

while (!pq.empty())
{

int u = pq.top().second; pq.pop();

inMST[u] = true;


for (int v = 0; v < V; ++v)
{
if (!inMST[v] && graph[u][v] && graph[u][v] < key[v])
{
key[v] = graph[u][v]; parent[v] = u; pq.push({ key[v], v });
}
}
}


int minCost = 0;
for (int i = 1; i < V; ++i)
minCost += key[i];


return minCost;
}


int main()
{

int numCities;
cout << "Enter the number of cities: "; cin >> numCities;


vector<vector < int>> graph(numCities, vector<int> (numCities)); cout << "Enter the adjacency matrix representing the graph :"
for (int i = 0; i < numCities; ++i)
{
for (int j = 0; j < numCities; ++j)
{
cin >> graph[i][j];
}
}


int minCost = primMST(graph);
cout << "Minimum cost to connect all cities: " << minCost << endl;


return 0;
}

